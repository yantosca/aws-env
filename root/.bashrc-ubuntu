#------------------------------------------------------------------------------
#                  GEOS-Chem Global Chemical Transport Model                  !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: .bashrc
#
# !DESCRIPTION: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
#\\
#\\
# !CALLING SEQUENCE:
#  source ~/.bashrc
#
# !REMARKS:
#  Started with the default Ubuntu .bashrc file and added various settings
#  for GEOS-Chem and Spack.
#EOP
#------------------------------------------------------------------------------
#BOC

#==============================================================================
# %%%%% Default settings for Ubuntu (plus some useful features) %%%%%
#==============================================================================

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Define a function to show the directory listing after using cd
# (whether or not .bash_aliases is found) 
alias cd=cdls
function cdls() {
    # first do 'cd'
    command cd $@  #'command' ensures we use original 'cd'
    # then do 'ls'
    nfiles=$(ls -1 | wc -l) # how many files
    if [ $nfiles -lt 60 ] # list all files if not too many
    then
	ls
    else
	ls | head -n 4
	echo $nfiles ' files in total, only list a few'
    fi
}

#==============================================================================
# %%%%% Spack settings %%%%%
#==============================================================================

# Spack environment variables
export SPACK_ROOT=$HOME/spack
export SPACK_BIN=$SPACK_ROOT/bin

# Spack initialization
. $SPACK_ROOT/share/spack/setup-env.sh 

#==============================================================================
# %%%%% Environment variables for GEOS-Chem %%%%%
#
# See http://wiki.geos-chem.org/Configuring_your_computational_environment
# Note: using backticks executes a shell command
#==============================================================================

# gcc and gfortran 9.2.0 compilers
export GCC_ROOT=`spack location -i gcc@9.2.0`
export GCC_BIN=$GCC_ROOT/bin

# emacs
export EMACS_ROOT=
export EMACS_BIN=$EMACS_ROOT/bin

# cgdb debugger
export CGDB_ROOT=
export CGDB_BIN=$CGDB_ROOT/bin

# CMake
export CMAKE_ROOT=
export CMAKE_ROOT=

# Flex library (for building KPP)
export FLEX_ROOT=

# HDF5 library (built with netCDF)
export HDF5_ROOT=

# netCDF operators
export NCO_ROOT=

# OpenJDK (Java)
export OPENJDK_ROOT=

# netCDF
export NETCDF_ROOT=
export GC_BIN=$NETCDF_ROOT/bin
export GC_INCLUDE=$NETCDF_ROOT/include
export GC_LIB=$NETCDF_ROOT/lib

# netCDF-Fortran
export NETCDF_FORTRAN_ROOT=
if [[ "x$NETCDF_FORTRAN_ROOT" != "x" ]]; then
    export GC_F_BIN=$NETCDF_FORTRAN_ROOT/bin
    export GC_F_INCLUDE=$NETCDF_FORTRAN_ROOT/include
    export GC_F_LIB=$NETCDF_FORTRAN_ROOT/lib
fi

# ncview
export NCVIEW_ROOT=

# Perl
export PERL_ROOT=

# TAU performance profiler
export TAU_ROOT=

# Environment variables for compilers
export FC=gfortran
export CC=gcc
export CXX=g++

# OpenMP parallelization for GEOS-Chem "Classic"
ulimit -s unlimited
export OMP_STACKSIZE=500m

#==============================================================================
# %%%%% Personal settings (feel free to edit) %%%%%
#==============================================================================

# Alias definitions.

if [ -f ~/.bash_aliases ]; then

    # You may want to put all your additions into a separate file like
    # ~/.bash_aliases, instead of adding them here directly.
    # See /usr/share/doc/bash-doc/examples in the bash-doc package.
    . ~/.bash_aliases

else

    # If .bash_aliases is not found, then define a few good aliases here
    
    # GEOS-Chem downloads
    alias clone_gc="git clone https://github.com/geoschem/geos-chem.git"
    alias clone_ut="git clone https://github.com/geoschem/geos-chem-unittest.git"

    # control conda virtual env
    alias act='source activate'
    alias deact='source deactivate'

fi

#==============================================================================
# %%%%% PATH variable %%%%%
#
# NOTE: Add paths for Spack-built executables to the front of $PATH
#==============================================================================
export PATH="$GCC_BIN:$HOME/miniconda/bin:$PATH"

#BOC
